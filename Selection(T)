<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Selection Sort Theory</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <style>
    body {
      background-color: #2563EB;
      animation: fadeIn 1s ease-out;
    }

    @keyframes fadeIn {
      0% {
        opacity: 0;
      }
      100% {
        opacity: 1;
      }
    }

    .section-box {
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      margin-bottom: 30px;
      opacity: 0;
      animation: fadeUp 1s forwards;
      animation-delay: 0.5s;
    }

    @keyframes fadeUp {
      0% {
        opacity: 0;
        transform: translateY(20px);
      }
      100% {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .section-header {
      font-size: 1.75rem;
      font-weight: 600;
      color: #333;
      margin-bottom: 15px;
      border-bottom: 2px solid #e0e0e0;
      padding-bottom: 10px;
      transition: color 0.3s ease;
    }

    .section-header:hover {
      color: #2563EB;
    }

    .section-content {
      font-size: 1rem;
      color: #555;
      line-height: 1.6;
    }

    .list-disc {
      margin-left: 1.5rem;
    }

    .code-box {
      background-color: #f4f4f4;
      padding: 15px;
      border-radius: 5px;
      font-family: monospace;
      white-space: pre-wrap;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      margin-top: 15px;
      transition: background-color 0.3s ease;
    }

    .code-box:hover {
      background-color: #e0e0e0;
    }

    .highlight {
      background-color: #ffcc00;
    }

    .home-button {
      border: 2px solid #ffffff;
      padding: 10px 20px;
      border-radius: 8px;
      color: #ffffff;
      text-decoration: none;
      font-weight: 500;
      background-color: transparent;
      transition: background-color 0.3s ease, color 0.3s ease;
    }

    .home-button:hover {
      background-color: #f0f0f0;
      color: #2563EB;
    }

    .section-content li:hover {
      background-color: #f0f0f0;
      padding: 5px;
      border-radius: 5px;
      transition: background-color 0.3s ease;
    }

    header {
      display: flex;
      justify-content: center;
      align-items: center;
      text-align: center;
      height: 100px;
      padding: 0 10px;
    }

    .logo-container {
      display: flex;
      justify-content: center;
      align-items: center;
    }

    h1 {
      font-size: 2.5rem;
      font-weight: bold;
      color: white;
      margin: 0;
    }

    nav {
      position: absolute;
      right: 20px;
      top: 50%;
      transform: translateY(-50%);
    }

    @media (max-width: 640px) {
      .section-header {
        font-size: 1.25rem;
      }

      .section-content {
        font-size: 0.95rem;
      }

      h1 {
        font-size: 2rem;
      }

      .section-box {
        padding: 15px;
      }

      .home-button {
        padding: 8px 16px;
      }
    }

    @media (max-width: 1024px) {
      .section-header {
        font-size: 1.5rem;
      }
    }
  </style>
</head>
<body class="font-sans">

  <!-- Header Section -->
  <header class="bg-blue-600 text-white p-6">
    <div class="max-w-screen-xl mx-auto w-full flex justify-center items-center relative">
      <h1 class="text-4xl font-bold">AlgoVisual</h1>
      <nav class="flex space-x-6 text-lg absolute right-10 top-1/2 transform -translate-y-1/2">
        <a href="index.html" class="home-button">Home</a>
      </nav>
    </div>
  </header>

  <!-- Main Content -->
  <main class="py-12">
    <section class="max-w-screen-xl mx-auto px-6">

      <!-- What is Selection Sort -->
      <div class="section-box">
        <h2 class="section-header">What is Selection Sort?</h2>
        <p class="section-content">
          Selection Sort is an in-place comparison-based sorting algorithm. It works by repeatedly selecting the smallest (or largest, depending on sorting order) element from the unsorted portion of the array and swapping it with the first unsorted element.
        </p>
      </div>

      <!-- How Selection Sort Works -->
      <div class="section-box">
        <h2 class="section-header">How does Selection Sort work?</h2>
        <ol class="section-content list-disc">
          <li><strong>Step 1:</strong> Start with the first element of the array as the minimum.</li>
          <li><strong>Step 2:</strong> Search through the remaining unsorted part of the array to find the smallest element.</li>
          <li><strong>Step 3:</strong> Swap the smallest element found with the element at the first unsorted position.</li>
          <li><strong>Step 4:</strong> Move the boundary of the sorted and unsorted part of the array by one position.</li>
          <li><strong>Step 5:</strong> Repeat this process for the remaining unsorted portion of the array until the entire array is sorted.</li>
        </ol>
      </div>

      <!-- Time Complexity -->
      <div class="section-box">
        <h2 class="section-header">Time Complexity of Selection Sort</h2>
        <p class="section-content">
          The time complexity of Selection Sort is as follows:
        </p>
        <ul class="section-content list-disc">
          <li><strong>Best case:</strong> O(n^2) - Even when the array is sorted, the algorithm still checks every element.</li>
          <li><strong>Average case:</strong> O(n^2) - The algorithm compares all elements in the array.</li>
          <li><strong>Worst case:</strong> O(n^2) - The algorithm still checks all elements even when the array is in reverse order.</li>
        </ul>
      </div>

      <!-- Advantages -->
      <div class="section-box">
        <h2 class="section-header">Advantages of Selection Sort</h2>
        <ul class="section-content list-disc">
          <li>Simple and easy to understand.</li>
          <li>Does not require additional memory (in-place sort).</li>
          <li>Works well with small datasets.</li>
        </ul>
      </div>

      <!-- Disadvantages -->
      <div class="section-box">
        <h2 class="section-header">Disadvantages of Selection Sort</h2>
        <ul class="section-content list-disc">
          <li>Not efficient for large datasets due to O(n^2) time complexity.</li>
          <li>Does not perform well when sorting large arrays.</li>
        </ul>
      </div>

      <!-- Applications -->
      <div class="section-box">
        <h2 class="section-header">Applications of Selection Sort</h2>
        <ul class="section-content list-disc">
          <li>Used for small datasets where efficiency is not a major concern.</li>
          <li>Can be useful when memory usage is a critical factor, as it performs in-place sorting.</li>
          <li>Commonly used in situations where simplicity and ease of implementation are prioritized over speed.</li>
        </ul>
      </div>

      <!-- Example -->
      <div class="section-box">
        <h2 class="section-header">Selection Sort Example</h2>
        <div class="section-content">
          <p>Consider the array: <code>[5, 3, 8, 4, 2]</code></p>
          <p>Step-by-step sorting:</p>
          <ul class="list-disc pl-6">
            <li>Pass 1: <code>[2, 3, 8, 4, 5]</code> (Smallest element 2 swapped with 5)</li>
            <li>Pass 2: <code>[2, 3, 8, 4, 5]</code> (3 is already in correct position)</li>
            <li>Pass 3: <code>[2, 3, 4, 8, 5]</code> (Smallest element 4 swapped with 8)</li>
            <li>Pass 4: <code>[2, 3, 4, 5, 8]</code> (Smallest element 5 swapped with 8)</li>
          </ul>
          <p>Final sorted array: <code>[2, 3, 4, 5, 8]</code></p>
        </div>
      </div>

    </section>
  </main>

  <!-- Footer Section -->
  <footer class="bg-blue-600 text-white p-6">
    <div class="max-w-screen-xl mx-auto text-center">
      <p>&copy; 2025 AlgoVisual | All rights reserved</p>
    </div>
  </footer>

</body>
</html>
